{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","_ref","name","id","email","react_default","a","createElement","className","alt","src","concat","CardList","robots","cardComponent","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","_super","call","state","hasErro","error","info","setState","hasError","Component","App","onSearchChange","event","target","value","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","src_containers_App","document","getElementById"],"mappings":"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","file":"static/js/main.f4932453.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name,id,email} ) => {\r\n\treturn(\r\n          //This is deconstructor that lets us use id directly instead of props.id or props.name etc you can also put this in place of args\r\n          <div className=\" bg-light-green dib br3 grow pa3 ma2 bw2 shadow-5\">\r\n          <img alt=\"robots\" src={`https://robohash.org/${id}?200*200`}/>\r\n          <div>\r\n              <h2>{name}</h2>\r\n              <p>{email}</p>\r\n          </div>\r\n          </div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n     const cardComponent = robots.map((user, i) => {\r\n          return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />;\r\n     })\r\n\r\n     return (\r\n          <div>\r\n               {cardComponent}\r\n          </div>\r\n     );\r\n}\r\n\r\n\r\nexport default CardList","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n\treturn(\r\n\t\t<div className=\"pa2\"> \r\n\t\t  <input \r\n\t\t  type=\"search\" \r\n\t\t  placeholder=\"Search Robots\" \r\n\t\t  className=\"pa3 ba b--green bg-lightest-blue\" \r\n\t\t  onChange={searchChange}\r\n\t\t  />\r\n\t\t</div>\r\n   \r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', border: '1px solid black', height: '800px' }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasErro: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oooops. That is not good</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll'\r\nimport './App.css';\r\nimport 'tachyons';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(users => this.setState({ robots: users }));\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({ searchfield: event.target.value })\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { robots, searchfield } = this.state;\r\n\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t})\r\n\r\n\t\tif (!robots.length) {\r\n\t\t\treturn <h1 className=\"tc\">Loading</h1>\r\n\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"tc\">\r\n\t\t\t\t\t<h1> RoboFriends </h1>\r\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange} />\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t\t\t<CardList robots={filteredRobots} />\r\n\t\t\t\t\t\t</ErrorBoundry>\r\n\r\n\t\t\t\t\t</Scroll>\r\n\r\n\r\n\t\t\t\t</div>\r\n\r\n\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t}\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}